// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id String @id @default(uuid())
  username String @unique
  name String?
  password String
  tagline String?
  img String?
  following Follow[] @relation("following")
  followers Follow[] @relation("followers")
  Likes Like[]
  posts Post[]
  comments  Comment[] 
}
model Post{
  id String @id @default(uuid())
  title String
  content String
  plainText String?
  thumbnail String?
  published Boolean @default(false)
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  authorId String
  createdAt  DateTime  @default(now())  
  Likes Like[] 
  comments  Comment[] 
}

model Comment {
  id       String @id @default(uuid())
  content  String
  postId   String
  post     Post   @relation(fields: [postId], references: [id],onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  createdAt  DateTime  @default(now())
}
model Like {
  id        String  @id @default(uuid())
  postId    String
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
model Follow{
  id         String  @id @default(uuid())
  followerId String
  followingId String
  follower   User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following  User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}